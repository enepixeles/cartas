/* --- Importación de Fuentes (Opcional, pero recomendado) --- */
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap');

/* --- Estilos Generales --- */
body {
    font-family: 'Poppins', sans-serif;
    background-color: #f4f7f9;
    margin: 0;
    padding: 40px 0;
    overflow-x: hidden;
}

/* --- Contenedor Principal --- */
.premios-container {
    max-width: 1200px;
    margin: auto;
    padding: 0 20px;
}

.premios-container h1, .card-row h2 {
    text-align: center;
    color: #333;
    margin-bottom: 50px;
}
.card-row h2 {
    text-align: left;
    margin-bottom: 20px;
}

/* --- Contenedor del Carrusel y Flechas --- */
.carousel-wrapper {
    position: relative;
    padding: 0 30px;
}

.carousel-container {
    /* CAMBIO: Se permite el desbordamiento vertical */
    overflow-y: visible;
    overflow-x: hidden;
    padding: 0 20px;
    box-sizing: border-box;
}

.carousel-track {
    display: grid;
    gap: 20px;
    grid-auto-flow: column;
    grid-auto-columns: 100%; 
    transition: transform 0.5s ease-in-out;
    padding-top: 70px;
}

/* --- Diseño de cada Tarjeta de Premio --- */
.premio-card {
    border-radius: 16px;
    padding: 220px 20px 40px 20px;
    text-align: center;
    box-shadow: none;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    min-height: 420px;
    cursor: pointer;
    box-sizing: border-box;
    position: relative;
    transition: transform 0.3s ease;
}

.premio-card:hover {
    transform: translateY(-5px);
}

.premio-card img {
    position: absolute;
    top: -80px;
    left: 50%;
    transform: translateX(-50%);
    width: 90%;
    object-fit: contain;
    filter: drop-shadow(0px 10px 15px rgba(0,0,0,0.2));
}

.premio-card .card-title {
    font-size: 1.2rem;
    font-weight: 600;
    margin: 0 0 8px 0;
    color: #333;
}

.premio-card .card-description {
    font-size: 0.9rem;
    line-height: 1.4;
    flex-grow: 1;
    margin-bottom: 20px;
    color: #333;
}

.card-cta-button {
    background-color: transparent;
    color: #333;
    border: 1px solid #555;
    padding: 8px 24px;
    border-radius: 50px;
    cursor: pointer;
    font-weight: 600;
    transition: none;
    align-self: center;
}

/* --- Colores Pastel específicos por fila --- */
.row-1 .premio-card:nth-of-type(4n + 1) { background-color: #ffdde1; }
.row-1 .premio-card:nth-of-type(4n + 2) { background-color: #c8e6c9; }
.row-1 .premio-card:nth-of-type(4n + 3) { background-color: #bbdefb; }
.row-1 .premio-card:nth-of-type(4n + 4) { background-color: #fff9c4; }

.row-2 .premio-card:nth-of-type(4n + 1) { background-color: #c8e6c9; }
.row-2 .premio-card:nth-of-type(4n + 2) { background-color: #bbdefb; }
.row-2 .premio-card:nth-of-type(4n + 3) { background-color: #fff9c4; }
.row-2 .premio-card:nth-of-type(4n + 4) { background-color: #d1c4e9; }

.row-3 .premio-card:nth-of-type(4n + 1) { background-color: #bbdefb; }
.row-3 .premio-card:nth-of-type(4n + 2) { background-color: #fff9c4; }
.row-3 .premio-card:nth-of-type(4n + 3) { background-color: #d1c4e9; }
.row-3 .premio-card:nth-of-type(4n + 4) { background-color: #ffccbc; }

.row-4 .premio-card:nth-of-type(4n + 1) { background-color: #fff9c4; }
.row-4 .premio-card:nth-of-type(4n + 2) { background-color: #d1c4e9; }
.row-4 .premio-card:nth-of-type(4n + 3) { background-color: #ffccbc; }
.row-4 .premio-card:nth-of-type(4n + 4) { background-color: #ffdde1; }


/* --- Flechas de Navegación del Carrusel con SVG --- */
.carousel-arrow {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: transparent;
    border: none;
    color: #333;
    cursor: pointer;
    z-index: 10;
    padding: 10px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.carousel-arrow svg {
    width: 32px;
    height: 32px;
}

.carousel-arrow.visible {
    display: flex;
}

.carousel-arrow:disabled {
    cursor: not-allowed;
    opacity: 0.2;
}

.arrow-left { left: -15px; }
.arrow-right { right: -15px; }


/* --- Ventana Modal para el Zoom (Pantalla Completa) --- */
.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background-color: transparent;
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s ease, visibility 0.3s ease, background-color 0.3s ease;
}

.modal-overlay.active {
    opacity: 1;
    visibility: visible;
}

.modal-content {
   max-width: 500px;
   width: 100%;
   padding: 20px;
   box-sizing: border-box;
}

.modal-content .premio-card {
    background-color: transparent !important;
    box-shadow: none;
    border: none;
    cursor: default;
    min-height: auto;
    padding: 20px;
}

.modal-content .premio-card img {
    position: static;
    transform: none;
    width: 80%;
    margin: 0 auto 25px;
    filter: none;
}

.modal-content .premio-card .card-title,
.modal-content .premio-card .card-description {
    color: #333;
    text-shadow: none;
}
.modal-content .premio-card .card-title {
    font-size: 2rem;
}
.modal-content .premio-card .card-description {
    font-size: 1.2rem;
}

.modal-close-button {
    position: fixed;
    top: 20px;
    right: 30px;
    background: none;
    border: none;
    color: #333;
    font-size: 3rem;
    cursor: pointer;
    z-index: 1001;
    text-shadow: none;
}

/* --- Media Query para Desktop (Diseño Responsivo) --- */
@media (min-width: 992px) {
    .carousel-container {
        padding: 0;
    }
    
    .carousel-track {
        grid-auto-columns: calc(25% - 15px);
    }
    
    .arrow-left { left: 0; }
    .arrow-right { right: 0; }
}```

---

### 3. `script.js`

(No se necesitaron cambios en este archivo).

```javascript
document.addEventListener('DOMContentLoaded', () => {

    /**
     * INICIALIZADOR DE CARRUSELES
     */
    document.querySelectorAll('.carousel-wrapper').forEach(wrapper => {
        const track = wrapper.querySelector('.carousel-track');
        if (!track) return;

        const cards = Array.from(track.children);
        const nextButton = wrapper.querySelector('.arrow-right');
        const prevButton = wrapper.querySelector('.arrow-left');
        let currentIndex = 0;

        if (cards.length === 0) return;

        const getVisibleCardsCount = () => {
            if (cards.length === 0) return 0;
            const cardWidth = cards[0].offsetWidth;
            const trackGap = parseInt(window.getComputedStyle(track).gap) || 0;
            const containerWidth = wrapper.querySelector('.carousel-container').offsetWidth;
            return Math.round(containerWidth / (cardWidth + trackGap));
        };

        const updateCarousel = () => {
            const visibleCards = getVisibleCardsCount();
            
            if (cards.length > visibleCards) {
                nextButton.classList.add('visible');
                prevButton.classList.add('visible');
            } else {
                nextButton.classList.remove('visible');
                prevButton.classList.remove('visible');
            }

            prevButton.disabled = currentIndex === 0;
            nextButton.disabled = currentIndex >= cards.length - visibleCards;
            
            const cardWidth = cards[0].offsetWidth;
            const trackGap = parseInt(window.getComputedStyle(track).gap) || 0;
            const offset = -currentIndex * (cardWidth + trackGap);
            track.style.transform = `translateX(${offset}px)`;
        };
        
        nextButton.addEventListener('click', () => {
            const visibleCards = getVisibleCardsCount();
            if (currentIndex < cards.length - visibleCards) {
                currentIndex++;
                updateCarousel();
            }
        });

        prevButton.addEventListener('click', () => {
            if (currentIndex > 0) {
                currentIndex--;
                updateCarousel();
            }
        });
        
        window.addEventListener('resize', updateCarousel);
        
        let touchStartX = 0;
        let touchEndX = 0;

        track.addEventListener('touchstart', e => {
            touchStartX = e.touches[0].clientX;
            touchEndX = 0; 
        }, { passive: true });

        track.addEventListener('touchmove', e => {
            touchEndX = e.touches[0].clientX;
        }, { passive: true });

        track.addEventListener('touchend', () => {
            if (touchEndX === 0) return;

            const diff = touchStartX - touchEndX;
            const threshold = 50; 

            if (diff > threshold) {
                nextButton.click();
            } else if (diff < -threshold) {
                prevButton.click();
            }
        });

        setTimeout(updateCarousel, 100);
    });


    /**
     * INICIALIZADOR DEL MODAL
     */
    const modalOverlay = document.getElementById('modalOverlay');
    const modalContent = document.getElementById('modalContent');
    const modalCloseBtn = document.getElementById('modalCloseBtn');
    
    document.querySelectorAll('.premio-card').forEach(card => {
        card.addEventListener('click', () => {
            const cardColor = window.getComputedStyle(card).backgroundColor;
            const clonedCard = card.cloneNode(true);
            
            clonedCard.querySelector('.card-cta-button').remove();

            modalContent.innerHTML = '';
            modalContent.appendChild(clonedCard);
            modalOverlay.style.backgroundColor = cardColor;
            modalOverlay.classList.add('active');
        });
    });

    const closeModal = () => {
        modalOverlay.classList.remove('active');
    };

    modalCloseBtn.addEventListener('click', closeModal);
    modalOverlay.addEventListener('click', (e) => {
        if (e.target === modalOverlay) {
            closeModal();
        }
    });
});```